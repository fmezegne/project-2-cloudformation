AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AcmCertificate:
    Description: The ARN of the AWS Certification Manager's Certificate 
    Type: String
    Default: "arn:aws:acm:us-east-1:086900803177:certificate/bd5c1908-2a61-4252-af67-32d6132bc54d"
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

#WORDPRESS PARAMETERS
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    Default: admin
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBRootPassword:
    NoEcho: 'true'
    Description: MySQL root password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  MultiAZDatabase:
    Default: 'false'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBClass:
    Description: Database instance class
    Type: String
    Default: db.t2.small
    AllowedValues:
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
    ConstraintDescription: must select a valid database instance type.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-032930428bf1abbff
      HVMG2: ami-0aeb704d503081ea6
    us-east-2:
      HVM64: ami-027cab9a7bf0155df
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-088c153f74339f34c
      HVMG2: ami-0a7fc72dc0e51aa77
    us-west-2:
      HVM64: ami-01fee56b22f308154
      HVMG2: ami-0fe84a5b4563d8f27

Resources:
 # public load balancer
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
      - !ImportValue Fox-network-template-Pub1SubnetID
      - !ImportValue Fox-network-template-Pub2SubnetID
      SecurityGroups:
        - !ImportValue Fox-web-server-sg-ELBSecurityGroupID

# Public target Group
  TargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /wordpress/wp-admin/install.php 
      HealthCheckPort: "traffic-port"   
      Matcher:
        HttpCode: '200-499'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue Fox-network-template-VPCID

#  Create a Listener on Port 80  with redirect
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Query: "#{query}"
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP          
 
# Create a Listener on Port 443
  ALBListenerSslCertificate:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: "arn:aws:acm:us-east-1:086900803177:certificate/bd5c1908-2a61-4252-af67-32d6132bc54d"
      DefaultActions:
        - Type: forward 
          TargetGroupArn: !Ref TargetGroupPublic
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS 

      # WORDPRESS

  ####### define Autoscalling group template    
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn: DBInstance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
            - configure_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              php73: []
              php73-mysqlnd: []
              mysql57: []
              mysql57-server: []
              mysql57-devel: []
              mysql57-libs: []
              httpd24: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/setup.mysql:
              content: !Join 
                - ''
                - - 'CREATE DATABASE '
                  - !Ref DBName
                  - |
                    ;
                  - CREATE USER '
                  - !Ref DBUser
                  - '''@''localhost'' IDENTIFIED BY '''
                  - !Ref DBPassword
                  - |
                    ';
                  - 'GRANT ALL ON '
                  - !Ref DBName
                  - .* TO '
                  - !Ref DBUser
                  - |
                    '@'localhost';
                  - |
                    FLUSH PRIVILEGES;
              mode: '000400'
              owner: root
              group: root
            /tmp/create-wp-config:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash -xe
                  - >
                    cp /var/www/html/wordpress/wp-config-sample.php
                    /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - !Ref DBName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - !Ref DBUser
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - !Ref DBPassword
                  - |
                    '/g" wp-config.php
              mode: '000500'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
        configure_wordpress:
          commands:
            01_set_mysql_root_password:
              command: !Join 
                - ''
                - - mysqladmin -u root password '
                  - !Ref DBRootPassword
                  - ''''
              test: !Join 
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -u root --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            02_create_database:
              command: !Join 
                - ''
                - - mysql -u root --password='
                  - !Ref DBRootPassword
                  - ''' < /tmp/setup.mysql'
              test: !Join 
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -u root --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            03_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress    
    Properties:
      ImageId: ami-032930428bf1abbff
      # ImageId: ami-02e136e904f3da870      
      AssociatePublicIpAddress: 'true'
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !ImportValue Fox-web-server-sg-publicSecurityGroupID
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --configsets wordpress_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource ApplicationAsg '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+ 

####### webserver autoscalling group
  ApplicationAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 60
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier:
        - !ImportValue Fox-network-template-Pub2SubnetID
        - !ImportValue Fox-network-template-Pub1SubnetID
      TargetGroupARNs: 
        - !Ref TargetGroupPublic
      NotificationConfigurations:
      - TopicARN: !Ref MySNSTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        - autoscaling:TEST_NOTIFICATION     

  # SNS Topic   
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription: 
      - Endpoint: "fsilver23@yahoo.com"
        Protocol: email  

  #Scale Out Policy
  myScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationAsg
      ScalingAdjustment: '1'

  # Alarm for CPU utilisation higher that 70%
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '70'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instances
        is down
      Period: '60'
      AlarmActions:
      - !Ref MySNSTopic
      - !Ref myScaleOutPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: ApplicationAsg
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  # Scale in Policy
  myScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationAsg
      ScalingAdjustment: '-1'

  # Alarm for CPU utilisation lower that 30%
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '30'
      AlarmDescription: Alarm if CPU low or metric disappears indicating instance
        is down
      Period: '60'
      AlarmActions:
      - !Ref MySNSTopic
      - !Ref myScaleInPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: ApplicationAsg
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  DBEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !ImportValue Fox-web-server-sg-publicSecurityGroupID
      VpcId: !ImportValue Fox-network-template-VPCID
  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      MultiAZ: !Ref MultiAZDatabase
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBClass
      AllocatedStorage: !Ref DBAllocatedStorage
      VPCSecurityGroups:
        - !GetAtt 
          - DBEC2SecurityGroup
          - GroupId
 # properties added
      PubliclyAccessible: false
      AutoMinorVersionUpgrade: false    
      DBSubnetGroupName: !Ref myDBSubnetGroup 
      
  myDBSubnetGroup: 
    Properties: 
      DBSubnetGroupDescription: description
      SubnetIds: 
        - !ImportValue Fox-network-template-Priv1SubnetID
        - !ImportValue Fox-network-template-Priv2SubnetID
      Tags: 
        - 
          Key: String
          Value: String
    Type: "AWS::RDS::DBSubnetGroup"

# Private website configuration
  MyprivWebserver: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      IamInstanceProfile: !ImportValue ssm-role-template-Ec2InstanceProfileID     ###### allow ssm
      KeyName: !Ref KeyName
      SubnetId: !ImportValue Fox-network-template-Priv1SubnetID
      SecurityGroupIds: 
        - !ImportValue Fox-web-server-sg-privateSecurityGroupID
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-MyprivWebserver
      UserData:
        Fn::Base64: |
          #!/bin/bash 
          yum update -y 
          yum install -y httpd 
          systemctl start httpd 
          systemctl enable httpd
          echo "WELCOME TO AFRICAN FINANCIAL INTERNAL WEBSITE. THIS APPLICATION WAS LUNCHED USING CLOUDFORMATION." >/var/www/html/index.html

Outputs:
  WebsiteURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - PublicLoadBalancer
          - DNSName
        - /wordpress
    Description: WordPress Website
# External load balancer
  ExternalLoadBalancer:    
    Description: This LoadBalancer is for the public subnet
    Value:
      !Ref PublicLoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}-PublicLoadBalancerID"

  # Export Target Group
  TargetGroupPublic:
    Description: Webserver target group 
    Export:
      Name: !Sub ${AWS::StackName}-TargetGroupPublic
    Value: !Ref TargetGroupPublic

# Export Application Load Balancer Dns Name
  PublicLoadBalancerDnsName:
    Description: Application Load Balancer DNS Name 
    Export:
      Name: !Sub ${AWS::StackName}-PublicLoadBalancerDnsName
    Value: !GetAtt PublicLoadBalancer.DNSName 

  ApplicationAsg:
    Description: The ApplicationAsg ID 
    Value: !Ref ApplicationAsg
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationAsgID"

  InstanceId2:
    Description: Private IP of My private Webserver
    Value: !GetAtt MyprivWebserver.PrivateIp

  InstanceId1:
    Description: Mypriv1EC2Instance ID
    Value:
      !Ref MyprivWebserver
    Export:
      Name: !Sub "${AWS::StackName}-MyprivWebserverID"