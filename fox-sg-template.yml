Resources:
  PublicWebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP and SSH ingress
      VpcId: !ImportValue Fox-network-template-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 72.83.17.230/32  ####francoise ip home
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 24.97.68.194/32   ###### soho ip work
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 98.234.24.2/32     ##### danielle ip
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 192.168.0.0/16   #### vpc cidr block
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: 
            !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: 
            !Ref ELBSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-sg

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'SSH and Port 80'
      VpcId:
        !ImportValue Fox-network-template-VPCID
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - CidrIp: 0.0.0.0/0
            FromPort: 443
            IpProtocol: tcp
            ToPort: 443
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ELBSecurityGroup

  PrivateWebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP and SSH ingress
      VpcId: !ImportValue Fox-network-template-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 192.168.0.0/16  ##### my vpc cidr bloc
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 172.31.0.0/16    ##### peering vpc cidr block (idriss)
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 10.0.0.0/16     ##### peering vpc cidr block (francoise)
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 72.83.17.230/32     ###### francoise ip
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 98.234.24.2/32     ####### soho ip
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 192.168.0.0/16
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-sg


Outputs:
  PublicWebServerSecurityGroup:
    Description: The security group ID to use for public web servers
    Value: !GetAtt 
      - PublicWebServerSecurityGroup
      - GroupId
    Export:
      Name: !Sub '${AWS::StackName}-publicSecurityGroupID'

  PrivateWebServerSecurityGroup:
    Description: The security group ID to use for public web servers
    Value: !GetAtt 
      - PrivateWebServerSecurityGroup
      - GroupId
    Export:
      Name: !Sub '${AWS::StackName}-privateSecurityGroupID'

  ELBSecurityGroup:
    Description: The security group ID to use for the load balancer
    Value: !GetAtt 
      - ELBSecurityGroup
      - GroupId
    Export:
      Name: !Sub '${AWS::StackName}-ELBSecurityGroupID'